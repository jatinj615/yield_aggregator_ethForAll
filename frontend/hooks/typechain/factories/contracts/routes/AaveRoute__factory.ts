/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AaveRoute,
  AaveRouteInterface,
} from "../../../contracts/routes/AaveRoute";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidSender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "registryAddress",
        type: "address",
      },
    ],
    name: "RegistryAddressUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
      {
        internalType: "address",
        name: "_vaultAddress",
        type: "address",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
      {
        internalType: "address",
        name: "_vaultAddress",
        type: "address",
      },
    ],
    name: "getYieldBearingToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newRegistry",
        type: "address",
      },
    ],
    name: "updateRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "_underlying",
        type: "address",
      },
      {
        internalType: "address",
        name: "_vaultAddress",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610c89380380610c8983398101604081905261002f916100af565b806100393361005f565b600180546001600160a01b0319166001600160a01b0392909216919091179055506100df565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100c157600080fd5b81516001600160a01b03811681146100d857600080fd5b9392505050565b610b9b806100ee6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100fb578063c250283c1461010c578063c79809491461011f578063f2fde38b1461013257600080fd5b80631a5da6c81461008d57806323e103a8146100a2578063715018a6146100c85780637b103999146100d0575b600080fd5b6100a061009b366004610805565b610145565b005b6100b56100b0366004610829565b610197565b6040519081526020015b60405180910390f35b6100a0610250565b6001546100e3906001600160a01b031681565b6040516001600160a01b0390911681526020016100bf565b6000546001600160a01b03166100e3565b6100a061011a366004610829565b610264565b6100e361012d36600461087c565b61031a565b6100a0610140366004610805565b610397565b61014d610415565b600180546001600160a01b0319166001600160a01b0383169081179091556040517fc533a624c353ec88e315b162298e52e2b02aa03d5fb5afdbf13445a26f1d10c790600090a250565b6001546000906001600160a01b031633146101c557604051636edaef2f60e11b815260040160405180910390fd5b604051631a4ca37b60e21b81526001600160a01b038481166004830152602482018790528581166044830152600091908416906369328dec906064016020604051808303816000875af1158015610220573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024491906108b5565b9150505b949350505050565b610258610415565b610262600061046f565b565b6001546001600160a01b0316331461028f57604051636edaef2f60e11b815260040160405180910390fd5b6102a36001600160a01b03831682866104bf565b60405163617ba03760e01b81526001600160a01b0383811660048301526024820186905284811660448301526000606483015282169063617ba03790608401600060405180830381600087803b1580156102fc57600080fd5b505af1158015610310573d6000803e3d6000fd5b5050505050505050565b6040516335ea6a7560e01b81526001600160a01b03838116600483015260009182918416906335ea6a75906024016101e060405180830381865afa158015610366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038a91906109ad565b6101000151949350505050565b61039f610415565b6001600160a01b0381166104095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6104128161046f565b50565b6000546001600160a01b031633146102625760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610400565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8015806105395750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610513573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053791906108b5565b155b6105a45760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610400565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526105f69084906105fb565b505050565b6000610650826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166106cd9092919063ffffffff16565b8051909150156105f6578080602001905181019061066e9190610ad0565b6105f65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610400565b6060610248848460008585600080866001600160a01b031685876040516106f49190610b16565b60006040518083038185875af1925050503d8060008114610731576040519150601f19603f3d011682016040523d82523d6000602084013e610736565b606091505b509150915061074787838387610752565b979650505050505050565b606083156107c15782516000036107ba576001600160a01b0385163b6107ba5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610400565b5081610248565b61024883838151156107d65781518083602001fd5b8060405162461bcd60e51b81526004016104009190610b32565b6001600160a01b038116811461041257600080fd5b60006020828403121561081757600080fd5b8135610822816107f0565b9392505050565b6000806000806080858703121561083f57600080fd5b843593506020850135610851816107f0565b92506040850135610861816107f0565b91506060850135610871816107f0565b939692955090935050565b6000806040838503121561088f57600080fd5b823561089a816107f0565b915060208301356108aa816107f0565b809150509250929050565b6000602082840312156108c757600080fd5b5051919050565b6040516101e0810167ffffffffffffffff8111828210171561090057634e487b7160e01b600052604160045260246000fd5b60405290565b60006020828403121561091857600080fd5b6040516020810181811067ffffffffffffffff8211171561094957634e487b7160e01b600052604160045260246000fd5b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461097657600080fd5b919050565b805164ffffffffff8116811461097657600080fd5b805161ffff8116811461097657600080fd5b8051610976816107f0565b60006101e082840312156109c057600080fd5b6109c86108ce565b6109d28484610906565b81526109e060208401610956565b60208201526109f160408401610956565b6040820152610a0260608401610956565b6060820152610a1360808401610956565b6080820152610a2460a08401610956565b60a0820152610a3560c0840161097b565b60c0820152610a4660e08401610990565b60e0820152610100610a598185016109a2565b90820152610120610a6b8482016109a2565b90820152610140610a7d8482016109a2565b90820152610160610a8f8482016109a2565b90820152610180610aa1848201610956565b908201526101a0610ab3848201610956565b908201526101c0610ac5848201610956565b908201529392505050565b600060208284031215610ae257600080fd5b8151801515811461082257600080fd5b60005b83811015610b0d578181015183820152602001610af5565b50506000910152565b60008251610b28818460208701610af2565b9190910192915050565b6020815260008251806020840152610b51816040850160208701610af2565b601f01601f1916919091016040019291505056fea2646970667358221220df98f4756b707343a5ac94da3e8636664913222a9c11aa0f43896c435220d78364736f6c63430008110033";

type AaveRouteConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AaveRouteConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AaveRoute__factory extends ContractFactory {
  constructor(...args: AaveRouteConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AaveRoute> {
    return super.deploy(_registry, overrides || {}) as Promise<AaveRoute>;
  }
  override getDeployTransaction(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_registry, overrides || {});
  }
  override attach(address: string): AaveRoute {
    return super.attach(address) as AaveRoute;
  }
  override connect(signer: Signer): AaveRoute__factory {
    return super.connect(signer) as AaveRoute__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AaveRouteInterface {
    return new utils.Interface(_abi) as AaveRouteInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AaveRoute {
    return new Contract(address, _abi, signerOrProvider) as AaveRoute;
  }
}

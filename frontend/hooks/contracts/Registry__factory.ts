/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Registry, RegistryInterface } from "../../contracts/Registry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_connext",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DomainNotSupported",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "routeId",
        type: "uint256",
      },
    ],
    name: "RouteNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroRoutes",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "routeId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "route",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isEnabled",
        type: "bool",
      },
    ],
    name: "RouteAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "routeId",
        type: "uint256",
      },
    ],
    name: "RouteDisabled",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "domainId",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "reomoteRegistry",
            type: "address",
          },
        ],
        internalType: "struct Registry.RemoteRegistry[]",
        name: "_remoteRegistries",
        type: "tuple[]",
      },
    ],
    name: "addRemoteRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "route",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isEnabled",
            type: "bool",
          },
        ],
        internalType: "struct Registry.RouteData[]",
        name: "_routes",
        type: "tuple[]",
      },
    ],
    name: "addRoute",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "connext",
    outputs: [
      {
        internalType: "contract IConnext",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_routeId",
        type: "uint256",
      },
    ],
    name: "disableRoute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "registryForDomains",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiverAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "rescueFunds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "routes",
    outputs: [
      {
        internalType: "address",
        name: "route",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isEnabled",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "routeId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "vaultAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "underlying",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiverAddress",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "destinationDomain",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "relayerFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "slippage",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "asset",
                type: "address",
              },
            ],
            internalType: "struct Registry.BridgeRequest",
            name: "bridgeRequest",
            type: "tuple",
          },
        ],
        internalType: "struct Registry.VaultRequest",
        name: "_depositRequest",
        type: "tuple",
      },
    ],
    name: "userDepositRequest",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "routeId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "vaultAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "underlying",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiverAddress",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint32",
                name: "destinationDomain",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "relayerFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "slippage",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "asset",
                type: "address",
              },
            ],
            internalType: "struct Registry.BridgeRequest",
            name: "bridgeRequest",
            type: "tuple",
          },
        ],
        internalType: "struct Registry.VaultRequest",
        name: "_withdrawRequest",
        type: "tuple",
      },
    ],
    name: "userWithdrawRequest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_transferId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_asset",
        type: "address",
      },
      {
        internalType: "address",
        name: "_originSender",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "_origin",
        type: "uint32",
      },
      {
        internalType: "bytes",
        name: "_callData",
        type: "bytes",
      },
    ],
    name: "xReceive",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051611a9e380380611a9e83398101604081905261002f91610099565b61003833610049565b6001600160a01b03166080526100c9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ab57600080fd5b81516001600160a01b03811681146100c257600080fd5b9392505050565b60805161199e610100600039600081816101da015281816104cc01528181610644015281816106920152610d48015261199e6000f3fe6080604052600436106100c25760003560e01c8063d5af2af41161007f578063ea95260111610059578063ea95260114610229578063f2fde38b1461025f578063fd614f411461027f578063ffcdf4ed146102ac57600080fd5b8063d5af2af4146101a7578063de4b0548146101c8578063def9d605146101fc57600080fd5b80632625c2a9146100c75780636ccae054146100e9578063715018a614610109578063726f16d81461011e5780638da5cb5b14610162578063be5ec80014610194575b600080fd5b3480156100d357600080fd5b506100e76100e23660046114a7565b6102cc565b005b3480156100f557600080fd5b506100e76101043660046114fe565b6103d3565b34801561011557600080fd5b506100e76103ef565b34801561012a57600080fd5b5061013e61013936600461153f565b610403565b604080516001600160a01b0390931683529015156020830152015b60405180910390f35b34801561016e57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610159565b6100e76101a2366004611558565b610438565b6101ba6101b5366004611558565b610814565b604051908152602001610159565b3480156101d457600080fd5b5061017c7f000000000000000000000000000000000000000000000000000000000000000081565b34801561020857600080fd5b5061021c6102173660046114a7565b610a9d565b6040516101599190611571565b34801561023557600080fd5b5061017c6102443660046115ce565b6002602052600090815260409020546001600160a01b031681565b34801561026b57600080fd5b506100e761027a3660046115f0565b610c92565b34801561028b57600080fd5b5061029f61029a366004611623565b610d0b565b604051610159919061176c565b3480156102b857600080fd5b506100e76102c736600461153f565b610dc3565b6102d4610e98565b60005b818110156103ce5760008383838181106102f3576102f361177f565b905060400201602001602081019061030b91906115f0565b6001600160a01b0316036103325760405163d92e233d60e01b815260040160405180910390fd5b8282828181106103445761034461177f565b905060400201602001602081019061035c91906115f0565b600260008585858181106103725761037261177f565b61038892602060409092020190810191506115ce565b63ffffffff168152602081019190915260400160002080546001600160a01b0319166001600160a01b0392909216919091179055806103c6816117ab565b9150506102d7565b505050565b6103db610e98565b6103ce6001600160a01b0384168383610ef2565b6103f7610e98565b6104016000610f55565b565b6001818154811061041357600080fd5b6000918252602090912001546001600160a01b0381169150600160a01b900460ff1682565b60018054823591600091839081106104525761045261177f565b6000918252602090912001546001600160a01b03160361048d57604051634bd16f7f60e01b8152600481018290526024015b60405180910390fd5b6104ca60208301356104a560a08501608086016115f0565b6104b560608601604087016115f0565b6104c560808701606088016115f0565b610fa5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2fb26a66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610528573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054c91906117c4565b61055c60c0840160a085016115ce565b63ffffffff161461078c57600060028161057c60c0860160a087016115ce565b63ffffffff1681526020810191909152604001600020546001600160a01b0316036105ba57604051636323101960e01b815260040160405180910390fd5b600082356105ce60a08501608086016115f0565b6105de60608601604087016115f0565b6040805160208101949094526001600160a01b039283169084015216606082015260800160408051601f19818403018152919052905061063f3330602086013561062e60808801606089016115f0565b6001600160a01b0316929190611013565b6106887f0000000000000000000000000000000000000000000000000000000000000000602085013561067860808701606088016115f0565b6001600160a01b0316919061104b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016638aac16ba60c085018035906106cb9060a088016115ce565b600260006106df60c08a0160a08b016115ce565b63ffffffff1681526020810191909152604001600020546001600160a01b031661071161012089016101008a016115f0565b600089602001358a60a00160400135896040518963ffffffff1660e01b815260040161074397969594939291906117dd565b60206040518083038185885af1158015610761573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061078691906117c4565b50505050565b6107d13360018460000135815481106107a7576107a761177f565b600091825260209182902001546001600160a01b03169085013561062e60808701606088016115f0565b610810823560208401356107eb60a08601608087016115f0565b6107fb60808701606088016115f0565b61080b60608801604089016115f0565b611160565b5050565b6000816000013560006001600160a01b0316600182815481106108395761083961177f565b6000918252602090912001546001600160a01b03160361086f57604051634bd16f7f60e01b815260048101829052602401610484565b6108a7602084013561088760a08601608087016115f0565b61089760608701604088016115f0565b6104c560808801606089016115f0565b600060018460000135815481106108c0576108c061177f565b6000918252602090912001546001600160a01b031663c79809496108ea60808701606088016115f0565b6108fa60608801604089016115f0565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109699190611838565b90506109ab3360018660000135815481106109865761098661177f565b600091825260209182902001546001600160a01b038581169392911690880135611013565b600060018560000135815481106109c4576109c461177f565b600091825260209182902001546001600160a01b0316906323e103a8908701356109f460a0890160808a016115f0565b610a0460808a0160608b016115f0565b610a1460608b0160408c016115f0565b6040516001600160e01b031960e087901b16815260048101949094526001600160a01b03928316602485015290821660448401521660648201526084016020604051808303816000875af1158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9491906117c4565b95945050505050565b6060610aa7610e98565b6000829003610ac9576040516318d78ff560e11b815260040160405180910390fd5b60008267ffffffffffffffff811115610ae457610ae461160d565b604051908082528060200260200182016040528015610b0d578160200160208202803683370190505b50905060005b83811015610c88576000858583818110610b2f57610b2f61177f565b610b4592602060409092020190810191506115f0565b6001600160a01b031603610b6c5760405163d92e233d60e01b815260040160405180910390fd5b6001858583818110610b8057610b8061177f565b83546001810185556000948552602090942060409091029290920192919091019050610bac8282611863565b505060018054610bbc91906118bc565b828281518110610bce57610bce61177f565b6020026020010181815250507f8c7241f7d7efcaf997d919b5026078b7bc3deb9041b162b9bd9ddfc1231d2c8c81868684818110610c0e57610c0e61177f565b610c2492602060409092020190810191506115f0565b878785818110610c3657610c3661177f565b9050604002016020016020810190610c4e91906118cf565b604080519384526001600160a01b03909216602084015215159082015260600160405180910390a180610c80816117ab565b915050610b13565b5090505b92915050565b610c9a610e98565b6001600160a01b038116610cff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610484565b610d0881610f55565b50565b63ffffffff8216600090815260026020526040902054606090849084906001600160a01b038084169116141580610d6b5750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b15610d88576040516282b42960e81b815260040160405180910390fd5b600080600086806020019051810190610da191906118ec565b925092509250610db4838c848d85611160565b50505050509695505050505050565b610dcb610e98565b8060006001600160a01b031660018281548110610dea57610dea61177f565b6000918252602090912001546001600160a01b031603610e2057604051634bd16f7f60e01b815260048101829052602401610484565b600060018381548110610e3557610e3561177f565b60009182526020909120018054911515600160a01b0260ff60a01b199092169190911790556040517f91a0168fe2af7d03fc4465ab611da7d997fe924f69c20e9d16a23e6fc7af88d490610e8c9084815260200190565b60405180910390a15050565b6000546001600160a01b031633146104015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610484565b6040516001600160a01b0383166024820152604481018290526103ce90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526111f9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b83600003610fc657604051631f2a200560e01b815260040160405180910390fd5b6001600160a01b0383161580610fe357506001600160a01b038216155b80610ff557506001600160a01b038116155b156107865760405163d92e233d60e01b815260040160405180910390fd5b6040516001600160a01b03808516602483015283166044820152606481018290526107869085906323b872dd60e01b90608401610f1e565b8015806110c55750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c391906117c4565b155b6111305760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610484565b6040516001600160a01b0383166024820152604481018290526103ce90849063095ea7b360e01b90606401610f1e565b600185815481106111735761117361177f565b6000918252602090912001546040516330940a0f60e21b8152600481018690526001600160a01b038581166024830152848116604483015283811660648301529091169063c250283c90608401600060405180830381600087803b1580156111da57600080fd5b505af11580156111ee573d6000803e3d6000fd5b505050505050505050565b600061124e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112cb9092919063ffffffff16565b8051909150156103ce578080602001905181019061126c919061192f565b6103ce5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610484565b60606112da84846000856112e2565b949350505050565b6060824710156113435760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610484565b600080866001600160a01b0316858760405161135f919061194c565b60006040518083038185875af1925050503d806000811461139c576040519150601f19603f3d011682016040523d82523d6000602084013e6113a1565b606091505b50915091506113b2878383876113bd565b979650505050505050565b6060831561142c578251600003611425576001600160a01b0385163b6114255760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610484565b50816112da565b6112da83838151156114415781518083602001fd5b8060405162461bcd60e51b8152600401610484919061176c565b60008083601f84011261146d57600080fd5b50813567ffffffffffffffff81111561148557600080fd5b6020830191508360208260061b85010111156114a057600080fd5b9250929050565b600080602083850312156114ba57600080fd5b823567ffffffffffffffff8111156114d157600080fd5b6114dd8582860161145b565b90969095509350505050565b6001600160a01b0381168114610d0857600080fd5b60008060006060848603121561151357600080fd5b833561151e816114e9565b9250602084013561152e816114e9565b929592945050506040919091013590565b60006020828403121561155157600080fd5b5035919050565b6000610120828403121561156b57600080fd5b50919050565b6020808252825182820181905260009190848201906040850190845b818110156115a95783518352928401929184019160010161158d565b50909695505050505050565b803563ffffffff811681146115c957600080fd5b919050565b6000602082840312156115e057600080fd5b6115e9826115b5565b9392505050565b60006020828403121561160257600080fd5b81356115e9816114e9565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c0878903121561163c57600080fd5b86359550602087013594506040870135611655816114e9565b93506060870135611665816114e9565b9250611673608088016115b5565b915060a087013567ffffffffffffffff8082111561169057600080fd5b818901915089601f8301126116a457600080fd5b8135818111156116b6576116b661160d565b604051601f8201601f19908116603f011681019083821181831017156116de576116de61160d565b816040528281528c60208487010111156116f757600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b60005b8381101561173757818101518382015260200161171f565b50506000910152565b6000815180845261175881602086016020860161171c565b601f01601f19169290920160200192915050565b6020815260006115e96020830184611740565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016117bd576117bd611795565b5060010190565b6000602082840312156117d657600080fd5b5051919050565b63ffffffff881681526001600160a01b0387811660208301528681166040830152851660608201526080810184905260a0810183905260e060c0820181905260009061182b90830184611740565b9998505050505050505050565b60006020828403121561184a57600080fd5b81516115e9816114e9565b8015158114610d0857600080fd5b813561186e816114e9565b81546001600160a01b031981166001600160a01b03929092169182178355602084013561189a81611855565b6001600160a81b03199190911690911790151560a01b60ff60a01b1617905550565b81810381811115610c8c57610c8c611795565b6000602082840312156118e157600080fd5b81356115e981611855565b60008060006060848603121561190157600080fd5b835192506020840151611913816114e9565b6040850151909250611924816114e9565b809150509250925092565b60006020828403121561194157600080fd5b81516115e981611855565b6000825161195e81846020870161171c565b919091019291505056fea26469706673582212209f5f2f522c458f554302502ea2e7ee8c13c8f07f088e8776f578f8cd218ef14364736f6c63430008110033";

type RegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Registry__factory extends ContractFactory {
  constructor(...args: RegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _connext: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Registry> {
    return super.deploy(_connext, overrides || {}) as Promise<Registry>;
  }
  override getDeployTransaction(
    _connext: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_connext, overrides || {});
  }
  override attach(address: string): Registry {
    return super.attach(address) as Registry;
  }
  override connect(signer: Signer): Registry__factory {
    return super.connect(signer) as Registry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryInterface {
    return new utils.Interface(_abi) as RegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Registry {
    return new Contract(address, _abi, signerOrProvider) as Registry;
  }
}

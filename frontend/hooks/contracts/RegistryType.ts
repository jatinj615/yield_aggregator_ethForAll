/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Registry {
  export type RemoteRegistryStruct = {
    domainId: PromiseOrValue<BigNumberish>;
    reomoteRegistry: PromiseOrValue<string>;
  };

  export type RemoteRegistryStructOutput = [number, string] & {
    domainId: number;
    reomoteRegistry: string;
  };

  export type RouteDataStruct = {
    route: PromiseOrValue<string>;
    isEnabled: PromiseOrValue<boolean>;
  };

  export type RouteDataStructOutput = [string, boolean] & {
    route: string;
    isEnabled: boolean;
  };

  export type BridgeRequestStruct = {
    destinationDomain: PromiseOrValue<BigNumberish>;
    relayerFee: PromiseOrValue<BigNumberish>;
    slippage: PromiseOrValue<BigNumberish>;
    asset: PromiseOrValue<string>;
  };

  export type BridgeRequestStructOutput = [
    number,
    BigNumber,
    BigNumber,
    string
  ] & {
    destinationDomain: number;
    relayerFee: BigNumber;
    slippage: BigNumber;
    asset: string;
  };

  export type VaultRequestStruct = {
    routeId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    vaultAddress: PromiseOrValue<string>;
    underlying: PromiseOrValue<string>;
    receiverAddress: PromiseOrValue<string>;
    bridgeRequest: Registry.BridgeRequestStruct;
  };

  export type VaultRequestStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    Registry.BridgeRequestStructOutput
  ] & {
    routeId: BigNumber;
    amount: BigNumber;
    vaultAddress: string;
    underlying: string;
    receiverAddress: string;
    bridgeRequest: Registry.BridgeRequestStructOutput;
  };
}

export interface RegistryInterface extends utils.Interface {
  functions: {
    "addRemoteRegistry((uint32,address)[])": FunctionFragment;
    "addRoute((address,bool)[])": FunctionFragment;
    "connext()": FunctionFragment;
    "disableRoute(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registryForDomains(uint32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueFunds(address,address,uint256)": FunctionFragment;
    "routes(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userDepositRequest((uint256,uint256,address,address,address,(uint32,uint256,uint256,address)))": FunctionFragment;
    "userWithdrawRequest((uint256,uint256,address,address,address,(uint32,uint256,uint256,address)))": FunctionFragment;
    "xReceive(bytes32,uint256,address,address,uint32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addRemoteRegistry"
      | "addRoute"
      | "connext"
      | "disableRoute"
      | "owner"
      | "registryForDomains"
      | "renounceOwnership"
      | "rescueFunds"
      | "routes"
      | "transferOwnership"
      | "userDepositRequest"
      | "userWithdrawRequest"
      | "xReceive"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRemoteRegistry",
    values: [Registry.RemoteRegistryStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addRoute",
    values: [Registry.RouteDataStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "connext", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disableRoute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registryForDomains",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueFunds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "routes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userDepositRequest",
    values: [Registry.VaultRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "userWithdrawRequest",
    values: [Registry.VaultRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "xReceive",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRemoteRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRoute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "connext", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registryForDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "routes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDepositRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xReceive", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RouteAdded(uint256,address,bool)": EventFragment;
    "RouteDisabled(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouteAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouteDisabled"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RouteAddedEventObject {
  routeId: BigNumber;
  route: string;
  isEnabled: boolean;
}
export type RouteAddedEvent = TypedEvent<
  [BigNumber, string, boolean],
  RouteAddedEventObject
>;

export type RouteAddedEventFilter = TypedEventFilter<RouteAddedEvent>;

export interface RouteDisabledEventObject {
  routeId: BigNumber;
}
export type RouteDisabledEvent = TypedEvent<
  [BigNumber],
  RouteDisabledEventObject
>;

export type RouteDisabledEventFilter = TypedEventFilter<RouteDisabledEvent>;

export interface Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRemoteRegistry(
      _remoteRegistries: Registry.RemoteRegistryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRoute(
      _routes: Registry.RouteDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    connext(overrides?: CallOverrides): Promise<[string]>;

    disableRoute(
      _routeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registryForDomains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rescueFunds(
      _token: PromiseOrValue<string>,
      _receiverAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    routes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { route: string; isEnabled: boolean }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userDepositRequest(
      _depositRequest: Registry.VaultRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userWithdrawRequest(
      _withdrawRequest: Registry.VaultRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    xReceive(
      _transferId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      _originSender: PromiseOrValue<string>,
      _origin: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addRemoteRegistry(
    _remoteRegistries: Registry.RemoteRegistryStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRoute(
    _routes: Registry.RouteDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  connext(overrides?: CallOverrides): Promise<string>;

  disableRoute(
    _routeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  registryForDomains(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rescueFunds(
    _token: PromiseOrValue<string>,
    _receiverAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  routes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { route: string; isEnabled: boolean }>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userDepositRequest(
    _depositRequest: Registry.VaultRequestStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userWithdrawRequest(
    _withdrawRequest: Registry.VaultRequestStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  xReceive(
    _transferId: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    _asset: PromiseOrValue<string>,
    _originSender: PromiseOrValue<string>,
    _origin: PromiseOrValue<BigNumberish>,
    _callData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRemoteRegistry(
      _remoteRegistries: Registry.RemoteRegistryStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    addRoute(
      _routes: Registry.RouteDataStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    connext(overrides?: CallOverrides): Promise<string>;

    disableRoute(
      _routeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    registryForDomains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueFunds(
      _token: PromiseOrValue<string>,
      _receiverAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    routes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { route: string; isEnabled: boolean }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userDepositRequest(
      _depositRequest: Registry.VaultRequestStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    userWithdrawRequest(
      _withdrawRequest: Registry.VaultRequestStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xReceive(
      _transferId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      _originSender: PromiseOrValue<string>,
      _origin: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RouteAdded(uint256,address,bool)"(
      routeId?: null,
      route?: null,
      isEnabled?: null
    ): RouteAddedEventFilter;
    RouteAdded(
      routeId?: null,
      route?: null,
      isEnabled?: null
    ): RouteAddedEventFilter;

    "RouteDisabled(uint256)"(routeId?: null): RouteDisabledEventFilter;
    RouteDisabled(routeId?: null): RouteDisabledEventFilter;
  };

  estimateGas: {
    addRemoteRegistry(
      _remoteRegistries: Registry.RemoteRegistryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRoute(
      _routes: Registry.RouteDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    connext(overrides?: CallOverrides): Promise<BigNumber>;

    disableRoute(
      _routeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registryForDomains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rescueFunds(
      _token: PromiseOrValue<string>,
      _receiverAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    routes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userDepositRequest(
      _depositRequest: Registry.VaultRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userWithdrawRequest(
      _withdrawRequest: Registry.VaultRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    xReceive(
      _transferId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      _originSender: PromiseOrValue<string>,
      _origin: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRemoteRegistry(
      _remoteRegistries: Registry.RemoteRegistryStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRoute(
      _routes: Registry.RouteDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    connext(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableRoute(
      _routeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registryForDomains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rescueFunds(
      _token: PromiseOrValue<string>,
      _receiverAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    routes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userDepositRequest(
      _depositRequest: Registry.VaultRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userWithdrawRequest(
      _withdrawRequest: Registry.VaultRequestStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    xReceive(
      _transferId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _asset: PromiseOrValue<string>,
      _originSender: PromiseOrValue<string>,
      _origin: PromiseOrValue<BigNumberish>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
